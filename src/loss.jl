# This is an internal function used in Flux to check that the size of the
# arguments passed to a loss function
function _check_sizes(yÃÇ::AbstractArray, y::AbstractArray)
  for d in 1:max(ndims(yÃÇ), ndims(y))
   size(yÃÇ,d) == size(y,d) || throw(DimensionMismatch(
      "loss function expects size(yÃÇ) = $(size(yÃÇ)) to match size(y) = $(size(y))"
    ))
  end
end
_check_sizes(yÃÇ, y) = nothing  # pass-through, for constant label e.g. y = 1
@non_differentiable _check_sizes(yÃÇ::Any, y::Any)


# ---- kpowerloss ----

"""
    kpowerloss(Œ∏ÃÇ, y, k; agg = mean, safeorigin = true, œµ = 0.1)

For `k` ‚àà (0, ‚àû), the `k`-th power absolute-distance loss,

```math
L(Œ∏ÃÇ, Œ∏) = |Œ∏ÃÇ - Œ∏|·µè,
```

contains the squared-error, absolute-error, and 0-1 loss functions as special
cases (the latter obtained in the limit as `k` ‚Üí 0).

It is Lipschitz continuous iff `k` = 1, convex iff `k` ‚â• 1, and strictly convex
iff `k` > 1. It is quasiconvex for all `k` > 0.

If `safeorigin = true`, the loss function is modified to avoid pathologies
around the origin, so that the resulting loss function behaves similarly to the
absolute-error loss in the `œµ`-interval surrounding the origin.
"""
function kpowerloss(Œ∏ÃÇ, Œ∏, k; safeorigin::Bool = true, agg = mean, œµ = ofeltype(Œ∏ÃÇ, 0.1))

   _check_sizes(Œ∏ÃÇ, Œ∏)

   if safeorigin
     d = abs.(Œ∏ÃÇ .- Œ∏)
     b = d .>  œµ
     L = vcat(d[b] .^ k, _safefunction.(d[.!b], k, œµ))
   else
     L = abs.(Œ∏ÃÇ .- Œ∏).^k
   end

   return agg(L)
end

function _safefunction(d, k, œµ)
  @assert d >= 0
  œµ^(k - 1) * d
end


# ---- quantile loss ----

"""
    quantileloss(Œ∏ÃÇ, Œ∏, q; agg = mean)

The asymmetric loss function whose minimiser is the `q`th posterior quantile; namely,
```math
L(Œ∏ÃÇ, Œ∏, q) = (Œ∏ÃÇ - Œ∏)(ùïÄ(Œ∏ÃÇ - Œ∏ > 0) - q),
```
where `q` ‚àà (0, 1) and ùïÄ(‚ãÖ) is the indicator function.

For further discussion, see Equation (7) of Cressie, N. (2022), "Decisions,
decisions, decisions in an uncertain environment", arXiv:2209.13157.
"""
function quantileloss(Œ∏ÃÇ, Œ∏, q; agg = mean)
  _check_sizes(Œ∏ÃÇ, Œ∏)
  d = Œ∏ÃÇ .- Œ∏
  b = d .> 0
  L‚ÇÅ = d[b] * (1 - q)
  L‚ÇÇ = -q * d[.!b]
  L = vcat(L‚ÇÅ, L‚ÇÇ)
  agg(L)
end


# ---- interval score ----

"""
    intervalscore(l, u, Œ∏, Œ±; agg = mean)

Given a 100√ó(1-`Œ±`)% confidence interval [`l`, `u`] with true value `Œ∏`, the
interval score is defined by
```math
S(l, u, Œ∏; Œ±) = (u - l) + 2Œ±‚Åª¬π(l - Œ∏)ùïÄ(Œ∏ < l) + 2Œ±‚Åª¬π(Œ∏ - u)ùïÄ(Œ∏ > u),
```
where `Œ±` ‚àà (0, 1) and ùïÄ(‚ãÖ) is the indicator function.

For further discussion, see Section 6 of Gneiting, T. and Raftery, A. E. (2007),
"Strictly proper scoring rules, prediction, and estimation",
Journal of the American statistical Association, 102, 359‚Äì378.
"""
function intervalscore(l, u, Œ∏, Œ±; agg = mean)

  b‚ÇÅ = Œ∏ .< l
  b‚ÇÇ = Œ∏ .> u
  b‚ÇÄ = .!(b‚ÇÅ .| b‚ÇÇ)

  S‚ÇÄ = (u[b‚ÇÄ] - l[b‚ÇÄ])
  S‚ÇÅ = (u[b‚ÇÅ] - l[b‚ÇÅ]) + (2 / Œ±) * (l[b‚ÇÅ] .- Œ∏[b‚ÇÅ])
  S‚ÇÇ = (u[b‚ÇÇ] - l[b‚ÇÇ]) + (2 / Œ±) * (Œ∏[b‚ÇÇ] .- u[b‚ÇÇ])

  S = vcat(S‚ÇÄ, S‚ÇÅ, S‚ÇÇ)
  agg(S)
end
