# ---- Helper functions for computing the MAP ----

# Scaled logistic function for constraining parameters
scaledlogistic(Œ∏, Œ©)    = scaledlogistic(Œ∏, minimum(Œ©), maximum(Œ©))
scaledlogistic(Œ∏, a, b) = a + (b - a) / (1 + exp(-Œ∏))

# Inverse of scaledlogistic
scaledlogit(f, Œ©)    = scaledlogit(f, minimum(Œ©), maximum(Œ©))
scaledlogit(f, a, b) = log((f - a) / (b - f))


# ---- Efficient gaussianloglikelihood ----

# TODO Add unit tests for these density functions

# The density function is
# ```math
# |2\pi\mathbf{\Sigma}|^{-1/2} \exp{-\frac{1}{2}\mathbf{y}^\top \mathbf{\Sigma}^{-1}\mathbf{y}},
# ```
# and the log-density is
# ```math
# -\frac{n}{2}\ln{2\pi}  -\frac{1}{2}\ln{|\mathbf{\Sigma}|} -\frac{1}{2}\mathbf{y}^\top \mathbf{\Sigma}^{-1}\mathbf{y}.
# ```

@doc raw"""
    gaussiandensity(y::A, L; logdensity::Bool = true) where {A <: AbstractArray{T, 1}} where T
	gaussiandensity(y::A, Œ£; logdensity::Bool = true) where {A <: AbstractArray{T, N}} where {T, N}

Efficiently computes the density function for `y` ~ ùëÅ(0, `Œ£`), with `L` the
lower Cholesky factor of the covariance matrix `Œ£`.

The method gaussiandensity(y::A, Œ£) assumes that the last dimension of `y`
corresponds to the indepdenent-replicates dimension, and it exploits the fact
that we need to compute the Cholesky factor `L` for these independent replicates
once only.
"""
function gaussiandensity(y::A, L; logdensity::Bool = true) where {A <: AbstractArray{T, 1}} where T
	n = length(y)
	x = L \ y # solution to Lx = y. If we need non-zero Œº in the future, use x = L \ (y - Œº)
	l = -0.5n*log(2œÄ) -logdet(L) -0.5dot(x, x)
    return logdensity ? l : exp(l)
end

function gaussiandensity(y::A, Œ£; logdensity::Bool = true) where {A <: AbstractArray{T, N}} where {T, N}

	# Here, we use `Symmetric()` to indicate that Œ£ is positive-definite;
	# this can help to alleviate issues caused by rounding, as described at
	# https://discourse.julialang.org/t/is-this-a-bug-with-cholesky/16970/3.
	L  = cholesky(Symmetric(Œ£)).L
	ll = mapslices(y -> gaussiandensity(vec(y), L, logdensity = logdensity), y, dims = 1:(N-1))
	return sum(ll)
end



# ---- Bivariate density function for Schlather's model ----

G(z‚ÇÅ, z‚ÇÇ, œà)   = exp(-V(z‚ÇÅ, z‚ÇÇ, œà))
G‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = (V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà) * V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) - V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)) * exp(-V(z‚ÇÅ, z‚ÇÇ, œà))
logG‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = log(V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà) * V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) - V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)) - V(z‚ÇÅ, z‚ÇÇ, œà)
f(z‚ÇÅ, z‚ÇÇ, œà)   = z‚ÇÅ^2 - 2*z‚ÇÅ*z‚ÇÇ*œà + z‚ÇÇ^2 # function to reduce code repetition
V(z‚ÇÅ, z‚ÇÇ, œà)   = (1/z‚ÇÅ + 1/z‚ÇÇ) * (1 - 0.5(1 - (z‚ÇÅ+z‚ÇÇ)^-1 * f(z‚ÇÅ, z‚ÇÇ, œà)^0.5))
V‚ÇÅ(z‚ÇÅ, z‚ÇÇ, œà)  = -0.5 * z‚ÇÅ^-2 + 0.5(œà / z‚ÇÅ - z‚ÇÇ/(z‚ÇÅ^2)) * f(z‚ÇÅ, z‚ÇÇ, œà)^-0.5
V‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)  = V‚ÇÅ(z‚ÇÇ, z‚ÇÅ, œà)
V‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) = -0.5(1 - œà^2) * f(z‚ÇÅ, z‚ÇÇ, œà)^-1.5

"""
	schlatherbivariatedensity(z‚ÇÅ, z‚ÇÇ, œà; logdensity::Bool = true)
The bivariate density function for Schlather's max-stable model, as given in
Rapha√´l Huser's PhD thesis (pg. 231-232) and in the supplementary material of the manuscript.
"""
schlatherbivariatedensity(z‚ÇÅ, z‚ÇÇ, œà; logdensity::Bool = true) = logdensity ? logG‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà) : G‚ÇÅ‚ÇÇ(z‚ÇÅ, z‚ÇÇ, œà)
_schlatherbivariatecdf(z‚ÇÅ, z‚ÇÇ, œà) = G(z‚ÇÅ, z‚ÇÇ, œà)


# ---- Subbotin (delta-Laplace) distribution ----

# See the following for a guide on extending Distributions:
# https://github.com/JuliaStats/Distributions.jl/blob/6ab4c1f5bd1b5b6890bbb6afc9d3349dc90cad6a/src/univariate/continuous/normal.jl
# https://juliastats.org/Distributions.jl/stable/extends/

@doc raw"""
	Subbotin(¬µ, œÑ, Œ¥)

The Subbotin (delta-Laplace) distribution with location parameter `Œº`,
scale parameter `œÑ>0`, and shape parameter `Œ¥>0` has density, distribution, and
quantile function,

```math
 f_S(y; \mu, \tau, \delta) = \frac{\delta}{2\tau \Gamma(1/\delta)} \exp{\left(-\left|\frac{y - \mu}{\tau}\right|^\delta\right)},\\
 F_S(y; \mu, \tau, \delta) = \frac{1}{2} + \textrm{sign}(y - \mu) \frac{1}{2 \Gamma(1/\delta)} \gamma\!\left(1/\delta, \left|\frac{y - \mu}{\tau}\right|^\delta\right),\\
 F_S^{-1}(p; \mu, \tau, \delta) = \text{sign}(p - 0.5)G^{-1}\left(2|p - 0.5|; \frac{1}{\delta}, \frac{1}{(k\tau)^\delta}\right)^{1/\delta} + \mu,
```

where ``\gamma(\cdot)`` is the unnormalised incomplete lower gamma function and ``G^{-1}(\cdot)``  is the quantile function of the Gamma distribution.

# Examples
```julia
d = Subbotin(0.7, 2, 2.5)

logpdf(d, 2.0)
cdf(d, 2.0)
quantile(d, 0.7)

# Standard Gaussian distribution:
Œº = 0.0; œÑ = sqrt(2); Œ¥ = 2.0
Subbotin(Œº, œÑ, Œ¥)

# Standard Laplace distribution:
Œº = 0.0; œÑ = 1.0; Œ¥ = 1.0
Subbotin(Œº, œÑ, Œ¥)
```
"""
struct Subbotin{T <: Real} <: ContinuousUnivariateDistribution
	Œº::T
	œÑ::T
	Œ¥::T
	Subbotin{T}(¬µ::T, œÑ::T, Œ¥::T) where {T <: Real} = new{T}(¬µ, œÑ, Œ¥)
end

# Aliases
const DeltaLaplace = Subbotin
const GeneralisedGaussian = Subbotin

# Constructors
function Subbotin(Œº::T, œÑ::T, Œ¥::T) where {T <: Real}
	# allow zero incase of numerical underflow
    @assert œÑ >= 0
	@assert Œ¥ >= 0
    return Subbotin{T}(¬µ, œÑ, Œ¥)
end
Subbotin(Œº::Real, œÑ::Real, Œ¥::Real) = Subbotin(promote(Œº, œÑ, Œ¥)...)
Subbotin(Œº::Integer, œÑ::Integer, Œ¥::Integer) = Subbotin(float(Œº), float(œÑ), float(Œ¥))

# Methods
cdf(d::Subbotin, q::Real) = F‚Çõ(q, d.Œº, d.œÑ, d.Œ¥)
logpdf(d::Subbotin, x::Real) = log(d.Œ¥)  - (abs((x - d.Œº)/d.œÑ))^d.Œ¥ - (log(2) + log(d.œÑ) + loggamma(1/d.Œ¥))
quantile(d::Subbotin, p::Real) = F‚Çõ‚Åª¬π(p, d.Œº, d.œÑ, d.Œ¥)
minimum(d::Subbotin)  = -Inf
maximum(d::Subbotin)  = Inf
insupport(d::Subbotin, x::Real) = true
mean(d::Subbotin)     = d.Œº
var(d::Subbotin)      = d.œÑ^2 * gamma((3*one(d.Œ¥))/d.Œ¥) / gamma(one(d.Œ¥)/d.Œ¥)
mode(d::Subbotin)     = d.Œº
skewness(d::Subbotin) = zero(d.Œº)

# Note that I still keep these as separate functions for backwards compatability
# with code in the paper.
f‚Çõ(x, Œº, œÑ, Œ¥)   = Œ¥ * exp(-(abs((x - Œº)/œÑ))^Œ¥) / (2œÑ * gamma(1/Œ¥))
F‚Çõ(q, Œº, œÑ, Œ¥)   = 0.5 + 0.5 * sign(q - Œº) * (1 / gamma(1/Œ¥)) * _incgammalowerunregularised(1/Œ¥, abs((q - Œº)/œÑ)^Œ¥)
F‚Çõ‚Åª¬π(p::T, Œº::T, œÑ::T, Œ¥::T) where T <: Real = Œº + sign(p - T(0.5)) * (œÑ^Œ¥ * quantile(Gamma(1/Œ¥), 2 * abs(p - T(0.5))))^(1/Œ¥)

# NB Distributions.jl say that we should implement the following methods,
# but I haven't done so because I haven't need to use them yet.
# Required:
# rand(::AbstractRNG, d::UnivariateDistribution)
# kurtosis(d::Distribution, ::Bool)
# entropy(d::Subbotin, ::Real)
# sampler(d::Distribution)
# Optional:
# mgf(d::UnivariateDistribution, ::Any)
# cf(d::UnivariateDistribution, ::Any)
